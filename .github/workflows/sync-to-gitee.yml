name: Sync to Gitee

on:
  # 在推送到任何分支时触发同步
  push:
    branches:
      - "**" # 匹配所有分支
  # 在创建 release 时触发同步
  release:
    types: [published]
  # 允许手动触发
  workflow_dispatch:

# 注意：使用此工作流前，请在 GitHub 仓库的 Settings > Secrets and variables > Actions 中添加以下 secrets:
# - GITEE_PRIVATE_KEY: 您的 Gitee SSH 私钥，用于 SSH 认证（必填）
# - GITEE_TOKEN: 您的 Gitee 个人访问令牌（需要有仓库读写权限，用于自动创建仓库和 API 操作）
# - GITEE_USERNAME: 您的 Gitee 用户名（例如：danielwu313）

jobs:
  sync-code:
    runs-on: ubuntu-latest
    steps:
      - name: Sync GitHub to Gitee
        uses: Yikun/hub-mirror-action@master
        with:
          # 源仓库，格式为 github/用户名
          src: github/SuperDaniel-cn
          # 目标仓库，格式为 gitee/用户名
          dst: gitee/danielwu313
          # 仅同步当前仓库
          static_list: anbao-scripts
          # Gitee 的私钥，用于 SSH 认证
          dst_key: ${{ secrets.GITEE_PRIVATE_KEY }}
          # Gitee 的个人访问令牌，用于自动创建仓库
          dst_token: ${{ secrets.GITEE_TOKEN }}
          # 账户类型，这里是用户仓库
          account_type: user
          # 强制更新，确保同步完整
          force_update: true
          # 使用 HTTPS 克隆方式
          clone_style: "ssh"

  sync-releases:
    needs: sync-code
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 获取所有历史记录和标签

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: Sync releases to Gitee
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}
          GITEE_USERNAME: ${{ secrets.GITEE_USERNAME }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          # 获取最新 release 信息
          release_info=$(gh release view --json tagName,name,body,assets)

          tag_name=$(echo "$release_info" | jq -r '.tagName')
          release_name=$(echo "$release_info" | jq -r '.name')
          release_body=$(echo "$release_info" | jq -r '.body')

          echo "Syncing release: $tag_name"

          # 创建 Gitee release
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $GITEE_TOKEN" \
            "https://gitee.com/api/v5/repos/$GITEE_USERNAME/$REPO_NAME/releases" \
            -d "{
              \"tag_name\": \"$tag_name\",
              \"name\": \"$release_name\",
              \"body\": \"$release_body\",
              \"target_commitish\": \"main\"
            }"

          # 下载并上传 assets
          assets=$(echo "$release_info" | jq -r '.assets[].browserDownloadUrl')
          for asset_url in $assets; do
            asset_name=$(basename "$asset_url")
            echo "Downloading asset: $asset_name"
            curl -L -o "$asset_name" "$asset_url"
            
            echo "Uploading asset to Gitee: $asset_name"
            curl -X POST \
              -H "Authorization: Bearer $GITEE_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              "https://gitee.com/api/v5/repos/$GITEE_USERNAME/$REPO_NAME/releases/$tag_name/assets?name=$asset_name" \
              --data-binary "@$asset_name"
          done
